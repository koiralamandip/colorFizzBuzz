{"version":3,"sources":["components/Modal/Modal.js","hooks/useFizzBuzz.js","components/Main/Main.js","hooks/useModal.js","App.js","reportWebVitals.js","index.js"],"names":["Modal","props","fizzBuzzResult","useMemo","console","log","arrayResult","number","result","push","className","isVisible","onClick","close","map","Main","useState","setVisible","open","useModal","useContext","ColorContext","colorState","dispatch","useEffect","type","style","backgroundColor","colors","length","colorData","color","availableColors","createContext","reducerFunction","state","action","index","Math","floor","random","App","useReducer","Provider","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQA8BeA,EA3BD,SAACC,GAIX,IAAMC,ECHWC,mBAAQ,WACrBC,QAAQC,IAAI,mBAEZ,IADA,IAAIC,EAAc,GACTC,EAAS,EAAGA,GAAS,IAAKA,IAAS,CAC5C,IAAIC,EAAU,GAEVD,EAAS,IAAM,IAAGC,GAAU,QAG5BD,EAAS,IAAM,IAAGC,GAAU,QACjB,KAAXA,IAEAA,EAASD,GAGbD,EAAYG,KAAKD,GAEjB,OAAOF,IACT,IDZF,OACI,mCAEI,qBAAKI,UAAS,uBAAkBT,EAAMU,UAAW,UAAY,IAA7D,SACI,sBAAKD,UAAU,QAAf,UACI,wBAAQA,UAAU,iBAAiBE,QAASX,EAAMY,MAAlD,yBACA,qBAAKH,UAAU,gBAAf,SAGIR,EAAeY,KAAI,SAACN,GAAD,OACf,4BAAIA,iBEoCjBO,EAnDF,WAGT,MCNoB,WAEpB,MAAgCC,oBAAS,GAAzC,mBAAOL,EAAP,KAAkBM,EAAlB,KAUA,MAAO,CAACN,YAAWO,KARnB,WACID,GAAW,SAACN,GAAD,OAAe,MAOLE,MAJzB,WACII,GAAW,SAACN,GAAD,OAAe,ODHGQ,GAA1BR,EAAP,EAAOA,UAAWO,EAAlB,EAAkBA,KAAML,EAAxB,EAAwBA,MAGxB,EAA+BO,qBAAWC,GAA1C,mBAAOC,EAAP,KAAmBC,EAAnB,KAGAC,qBACI,WACID,EAAS,CAACE,KAAM,mBACjB,IAaP,OACI,qCAEI,cAAC,EAAD,CAAOd,UAAWA,EAAWO,KAAMA,EAAML,MAAOA,IAMhD,sBAAKH,UAAU,eAAf,UACI,wBAAQA,UAAU,SAASgB,MAAO,CAACC,gBAAiBL,EAAWM,OAAON,EAAWM,OAAOC,OAAS,IAAKjB,QAlBvF,WACvBM,IACAK,EAAS,CACLE,KAAM,kBAeF,iDAIA,qBAAKf,UAAU,YAAf,SAEQY,EAAWM,OAAOd,KAAI,SAACgB,GAAD,OAClB,uBAAMC,MAAOD,EAAb,UAAyBA,EAAzB,mBEtCtBR,EAAa,CACjBU,gBAAiB,CAAC,MAAO,QAAS,OAAQ,QAAS,UACnDJ,OAAQ,IAIGP,EAAeY,wBAAc,CAACX,EAAY,eAIjDY,EAAkB,WAAiC,IAAhCC,EAA+B,uDAAvBb,EAAYc,EAAW,uCACtD,GAAoB,iBAAhBA,EAAOX,KAAwB,CACjC,IAAIM,EAAQ,GACZ,GAA8C,SAA1CI,EAAMP,OAAOO,EAAMP,OAAOC,OAAS,GACrCE,EAAQ,YACL,CACH,IAAMM,EAAQC,KAAKC,MAAsB,EAAhBD,KAAKE,UAC9BT,EAAQI,EAAMH,gBAAgBK,GAEhC,MAAO,CAACL,gBAAgB,YAAKG,EAAMH,iBAAkBJ,OAAO,GAAD,mBAAMO,EAAMP,QAAZ,CAAoBG,OAoBpEU,MAhBf,WAGE,MAA0BC,qBAAWR,EAAiBZ,GAAtD,mBAAOa,EAAP,KAAcZ,EAAd,KAEA,OACE,qBAAKb,UAAU,MAAf,SAGE,cAACW,EAAasB,SAAd,CAAuBC,MAAO,CAACT,EAAOZ,GAAtC,SACE,cAAC,EAAD,SC9BOsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.627e06b9.chunk.js","sourcesContent":["import { useFizzBuzz } from '../../hooks/useFizzBuzz';\r\nimport \"./Modal.css\";\r\n\r\nconst Modal = (props) => {\r\n    \r\n    // Custom hook that returns numbers from 1 to 10 as an array,\r\n    // where multiples of 3 become \"Fizz\", of 5 become \"Buzz\" and of both become \"FizzBuzz\"\r\n    const fizzBuzzResult = useFizzBuzz();\r\n\r\n\r\n    return (\r\n        <>\r\n            {/* Add \"visible\" to the classlist of modalWrapper if isVisible state is true. CSS for \"visible\" class handles the display */}\r\n            <div className={`modalWrapper ${props.isVisible? \"visible\" : \"\"}`}>\r\n                <div className=\"modal\">\r\n                    <button className=\"modal_controls\" onClick={props.close}>Close Modal</button>\r\n                    <div className=\"modal_content\">\r\n                        {\r\n                        // For each number/\"FizzBuzz\" in the result array, wrap the content in <p> tag.\r\n                        fizzBuzzResult.map((result) => (\r\n                            <p>{result}</p>\r\n                        ))\r\n                        }\r\n                    </div>\r\n                </div> \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Modal;","import {useMemo} from 'react';\r\n\r\nexport const useFizzBuzz = () => {\r\n    // jsResult stores the memoized array of computated values from (1 - 100 / [Fizz][Buzz])\r\n    const jsResult = useMemo(()=> {\r\n        console.log(\"run memo inside\");\r\n        let arrayResult = [];\r\n        for (let number = 1; number <=100; number++){\r\n        let result  = \"\";\r\n        // If number is divisible by 3, result = \"Fizz\"\r\n        if (number % 3 === 0) result += \"Fizz\";\r\n        // If number is also divisible by 5, result = \"FizzBuzz\"\r\n        // If number is only divisible by 5, result = \"Buzz\"\r\n        if (number % 5 === 0) result += \"Buzz\";\r\n        if (result === \"\"){\r\n            // Else, result == <the current number from the iteration>\r\n            result = number;\r\n        }\r\n        // push the result in an array and return it finally\r\n        arrayResult.push(result);\r\n        }\r\n        return arrayResult;\r\n    },[]);\r\n\r\n    return jsResult;\r\n}","import React, {useMemo, useState, useContext, useEffect} from 'react';\r\nimport { ColorContext } from '../../App'; // Context that supplies colors state to components that need it.\r\nimport { useModal } from '../../hooks/useModal';\r\nimport Modal from '../Modal/Modal';\r\n\r\nconst Main = () => {\r\n\r\n    //Custom Hook that returns the current visibility state and provides functions to open and close elements as per the visibility state. \r\n    const {isVisible, open, close} = useModal();\r\n\r\n    // Get state and action dispatcher function from the Context\r\n    const [colorState, dispatch] = useContext(ColorContext);\r\n    \r\n    // For the first render of this component, dispatch an action to change (or set) the background color of the button element \r\n    useEffect(\r\n        () => {\r\n            dispatch({type: 'COLOR_CHANGE'})\r\n        }, []\r\n    );\r\n\r\n    // Toggling function that toggles visibility of the modal.\r\n    // This function toggles the visibility of the model as well as dispatch an action to change button color\r\n    const openAndChangeColor = () => {\r\n        open();\r\n        dispatch({\r\n            type: 'COLOR_CHANGE',\r\n        });\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {/* QSN No. 3 ::: Shows a Modal to display FizzBuzz Result */}\r\n            <Modal isVisible={isVisible} open={open} close={close}/>\r\n            \r\n            {/* QSN No. 2 Solution:::\r\n                Displaying a 500X300 box at the center of screen and CSS @media query handles the \r\n                requirement of sizing when screen width < 600px\r\n            */}\r\n            <div className=\"center500300\">\r\n                <button className=\"runBtn\" style={{backgroundColor: colorState.colors[colorState.colors.length - 1]}} onClick={openAndChangeColor}> Show Result (1 to 100 / FizzBuzz) </button>\r\n                {/* QSN No 1 Solution::: The changed colors stored in the state and used/managed by Context, Reducers\r\n                    is then displayed as Comma Separated String\r\n                */}\r\n                <div className=\"colorlist\">\r\n                    {\r\n                        colorState.colors.map((colorData) => (\r\n                            <font color={colorData}>{colorData},</font>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Main;","import {useState} from 'react';\r\n\r\nexport const useModal = () => {\r\n\r\n    const [isVisible, setVisible] = useState(false);\r\n\r\n    function open(){\r\n        setVisible((isVisible) => true);\r\n    }\r\n\r\n    function close(){\r\n        setVisible((isVisible) => false);\r\n    }\r\n\r\n    return {isVisible, open, close}\r\n}","import React, {createContext, useReducer} from 'react';\nimport './App.css';\nimport Main from './components/Main/Main';\n\n// Initial State\n// state has an object containing two arrays:\n// 1 is available colors out of which sould be selected at random to change the button's color.\n// This is kept in state, so that we could define reducer and action to add/remove other colors in future\n// 2 is the array that holds the current and previous \"changed colors\" of the button\nconst colorState = {\n  availableColors: ['red', 'green', 'blue', 'black', 'orange'],\n  colors: []\n};\n\n// Creating a context to avoid props drilling and still let any deep child components use the state\nexport const ColorContext = createContext([colorState, ()=> {}]);\n\n// A reducer function that picks a color from available colors array at random \n//and changes the state (or actually say, creates a new state merging previous with the picked color)\nconst reducerFunction = (state = colorState, action) => {\n  if (action.type === 'COLOR_CHANGE'){\n    let color = \"\";\n    if (state.colors[state.colors.length - 1] === 'blue'){\n      color = 'green';\n    }else{\n      const index = Math.floor(Math.random() * 4);\n      color = state.availableColors[index];\n    }\n    return {availableColors: [...state.availableColors], colors: [...state.colors, color]}\n  }\n}\n\nfunction App() {\n\n  // useReducer hook enables us to use the state and dispatch function\n  const [state, dispatch] = useReducer(reducerFunction, colorState);\n\n  return (\n    <div className=\"App\">\n      {/* Wrapping child components in the Context's Provider component with a default value */}\n      {/* The default value is an array of the state and dispatch function, so that any child could access it and dispatch an action */}\n      <ColorContext.Provider value={[state, dispatch]}>\n        <Main/>\n      </ColorContext.Provider>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}